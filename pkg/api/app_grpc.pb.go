// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: app.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileStorageClient is the client API for FileStorage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileStorageClient interface {
	SendFile(ctx context.Context, in *File, opts ...grpc.CallOption) (*Resp, error)
	GetListFiles(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*ListFiles, error)
	GetFile(ctx context.Context, in *Req, opts ...grpc.CallOption) (*File, error)
}

type fileStorageClient struct {
	cc grpc.ClientConnInterface
}

func NewFileStorageClient(cc grpc.ClientConnInterface) FileStorageClient {
	return &fileStorageClient{cc}
}

func (c *fileStorageClient) SendFile(ctx context.Context, in *File, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, "/api.FileStorage/SendFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileStorageClient) GetListFiles(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*ListFiles, error) {
	out := new(ListFiles)
	err := c.cc.Invoke(ctx, "/api.FileStorage/GetListFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileStorageClient) GetFile(ctx context.Context, in *Req, opts ...grpc.CallOption) (*File, error) {
	out := new(File)
	err := c.cc.Invoke(ctx, "/api.FileStorage/GetFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileStorageServer is the server API for FileStorage service.
// All implementations must embed UnimplementedFileStorageServer
// for forward compatibility
type FileStorageServer interface {
	SendFile(context.Context, *File) (*Resp, error)
	GetListFiles(context.Context, *Nil) (*ListFiles, error)
	GetFile(context.Context, *Req) (*File, error)
	mustEmbedUnimplementedFileStorageServer()
}

// UnimplementedFileStorageServer must be embedded to have forward compatible implementations.
type UnimplementedFileStorageServer struct {
}

func (UnimplementedFileStorageServer) SendFile(context.Context, *File) (*Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFile not implemented")
}
func (UnimplementedFileStorageServer) GetListFiles(context.Context, *Nil) (*ListFiles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListFiles not implemented")
}
func (UnimplementedFileStorageServer) GetFile(context.Context, *Req) (*File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (UnimplementedFileStorageServer) mustEmbedUnimplementedFileStorageServer() {}

// UnsafeFileStorageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileStorageServer will
// result in compilation errors.
type UnsafeFileStorageServer interface {
	mustEmbedUnimplementedFileStorageServer()
}

func RegisterFileStorageServer(s grpc.ServiceRegistrar, srv FileStorageServer) {
	s.RegisterService(&FileStorage_ServiceDesc, srv)
}

func _FileStorage_SendFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(File)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileStorageServer).SendFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.FileStorage/SendFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileStorageServer).SendFile(ctx, req.(*File))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileStorage_GetListFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileStorageServer).GetListFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.FileStorage/GetListFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileStorageServer).GetListFiles(ctx, req.(*Nil))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileStorage_GetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileStorageServer).GetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.FileStorage/GetFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileStorageServer).GetFile(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

// FileStorage_ServiceDesc is the grpc.ServiceDesc for FileStorage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileStorage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.FileStorage",
	HandlerType: (*FileStorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendFile",
			Handler:    _FileStorage_SendFile_Handler,
		},
		{
			MethodName: "GetListFiles",
			Handler:    _FileStorage_GetListFiles_Handler,
		},
		{
			MethodName: "GetFile",
			Handler:    _FileStorage_GetFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app.proto",
}
